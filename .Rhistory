library(tidyverse)
library(ggside)
library(ozmaps)
library(sf)
library(scales)
library(arules)
library(vegan)
library(corrplot)
library(ggrepel)
library(mctoolsr)
library(FSA)
library(RColorBrewer)
library(broom)
library(readxl)
library(pheatmap)
# Functions
`%notin%` <- Negate(`%in%`)
source("~/Documents/GitHub/SunflowerGxE/code/cliffplot_taxa_bars.R")
# Working directory
setwd("~/Documents/GitHub/AussieStrains/")
d <- read.csv("data/metadata104.csv") %>%
dplyr::select(-X, -Prefix)
# Output just sampleID and coordinates
c <- d %>%
dplyr::select(sampleID, latitude, longitude)
#write.csv(c, "data/coords104.csv")
# Elevation, slope, aspect were missing, so conferred for all using DEM
#dem <- read.csv()
meta <- d %>%
#left_join(., dem, by = "sampleID")
mutate(Sample = paste("X", sampleID, sep = "")) %>%
dplyr::select(Sample, everything())
# Save metadata as text for mctoolsr import
length(unique(meta$Sample))
#write.table(meta, "data/metadata104wDEM.txt", row.names = F, sep = "\t")
#### 2. Environment ####
# Assess environmental variation in the 104 samples
names(d)
table(d$vegetation_type)
table(d$local_class)
env_vars <- c("boron_hot_cacl2", "clay", "conductivity",
"dtpa_copper", "dtpa_iron", "dtpa_manganese", "dtpa_zinc",
#"elev",
"exc_aluminium", "exc_calcium", "exc_magnesium",
"exc_potassium", "exc_sodium", "latitude",
"longitude", "nitrate_nitrogen", "organic_carbon",
"ph", "phosphorus_colwell",
"sand", "silt", "sulphur",
#"water_content", # 51 NA
"bio1", "bio12", "AI")
d_env <- d %>%
dplyr::select(all_of(env_vars))
hist(d_env$organic_carbon)
hist(d_env$nitrate_nitrogen)
hist(d_env$ph)
hist(d_env$bio1)
hist(d_env$bio12)
hist(d_env$clay)
#hist(d_env$water_content)
hist(d_env$conductivity)
#hist(d_env$elev)
hist(d_env$phosphorus_colwell)
hist(d_env$exc_potassium)
# plot(d_env$potassium_colwell, d_env$exc_potassium) # just use one
# Check NA by variable
n_na <- c()
for (i in 1:ncol(d_env)) {
n_na[i] <- sum(is.na(d_env[,i]))
}
n_na
# Most with 27, 37 NA
# 8 with no NAs
# 40 samples with data for all 19 of these columns! no NA.
d_env_nona <- d_env %>%
filter_at(vars(1:24), all_vars(!is.na(.))) %>%
set_names(c("B", "Clay", "Conductivity", "Cu", "Fe", "Mn", "Zn", "Al", "Ca", "Mg",
"K", "Na", "Lat", "Long", "NO3", "Org. C", "pH", "Colwell P",
"Sand", "Silt", "S", "Temp", "Precip", "Aridity")) %>%
dplyr::select(Clay, Silt, Sand, `Org. C`, NO3, `Colwell P`, pH, Conductivity,
B, Cu, Fe, Mn, Zn, Al, Ca, Mg, K, Na, S,
Lat, Long, Temp, Precip, Aridity)
# Corrplot
m <- cor(d_env_nona)
corrplot(m,
method = "square",
type = "lower",
diag = FALSE,
hclust.method = "ward.D2",
tl.cex = 0.5)
# PCA with vectors
d.pcx <- prcomp(d_env_nona)
set.seed(100)
ef <- envfit(d.pcx, d_env_nona, permutations = 999, na.rm = TRUE)
ef
ordiplot(d.pcx)
plot(ef, p.max = 0.05, cex = 0.5)
manual_factor <- 0.2
vec.df <- as.data.frame(ef$vectors$arrows*sqrt(ef$vectors$r)) %>%
mutate(PC1 = PC1 * manual_factor,
PC2 = PC2 * manual_factor) %>%
mutate(variables = rownames(.)) %>%
filter(ef$vectors$pvals < 0.05) %>%
mutate(shortnames = variables)
d.mvar <- sum(d.pcx$sdev^2)
PC1 <- paste("PC1: ", round((sum(d.pcx$sdev[1]^2)/d.mvar)*100, 1), "%")
PC2 <- paste("PC2: ", round((sum(d.pcx$sdev[2]^2)/d.mvar)*100, 1), "%")
d_env_nona$Axis01 <- vegan::scores(d.pcx)[,1]
d_env_nona$Axis02 <- vegan::scores(d.pcx)[,2]
d_env_nona$Axis01 <- d_env_nona$Axis01/sqrt(sum((d_env_nona$Axis01 - mean(d_env_nona$Axis01))^2))
d_env_nona$Axis02 <- d_env_nona$Axis02/sqrt(sum((d_env_nona$Axis02 - mean(d_env_nona$Axis02))^2))
ggplot(d_env_nona, aes(Axis01, Axis02)) +
geom_point(size = 3, alpha = 1, pch = 16) +
geom_segment(data = vec.df,
aes(x = 0, xend = PC1, y = 0, yend = PC2),
arrow = arrow(length = unit(0.35, "cm")),
colour = "gray", alpha = 0.6,
inherit.aes = FALSE) +
geom_text_repel(data = vec.df,
aes(x = PC1, y = PC2, label = shortnames),
size = 3, color = "red") +
labs(x = PC1,
y = PC2) +
theme_bw()
#### _Analysis ####
input_filt_rare <- readRDS("data/input_filt_rare_mtags.rds")
# Check beta diversity
bc <- calc_dm(input_filt_rare$data_loaded)
pcoa <- cmdscale(bc, k = nrow(input_filt_rare$map_loaded) - 1, eig = T)
d_env <- input_filt_rare$map_loaded %>%
dplyr::select(all_of(env_vars)) %>%
set_names(c("B", "Clay", "Conductivity", "Cu", "Fe", "Mn", "Zn", "Al", "Ca", "Mg",
"K", "Na", "Lat", "Long", "NO3", "Org. C", "pH", "Colwell P",
"Sand", "Silt", "S", "Temp", "Precip", "Aridity")) %>%
dplyr::select(Clay, Silt, Sand, `Org. C`, NO3, `Colwell P`, pH, Conductivity,
B, Cu, Fe, Mn, Zn, Al, Ca, Mg, K, Na, S,
Lat, Long, Temp, Precip, Aridity)
tax_sum_gen <- summarize_taxonomy(input = input_filt_rare,
level = 6,
report_higher_tax = T,
relative = T)
toBin <- tax_sum_gen %>%
filter(grepl("Bradyrhizobium|Streptomyces|Udaeobacter|Mycobacterium|Acidothermus",
rownames(.))) %>%
t() %>%
as.data.frame()
# Brady: 401644
# Strepto: 138530
# Udaeo: 12818
# Myco: 401610
# Acido: 401654
gen_abund <- data.frame("Genus" = rownames(tax_sum_gen),
"MeanPercRelAbund" = rowMeans(tax_sum_gen)*100) %>%
arrange(desc(MeanPercRelAbund))
gen_prev <- data.frame("Genus" = rownames(tax_sum_gen),
"Absent" = rowSums(tax_sum_gen==0)) %>%
mutate(Present_n = ncol(tax_sum_gen) - Absent) %>%
mutate(Present_Perc = Present_n/ncol(tax_sum_gen)*100) %>%
arrange(desc(Present_Perc))
# Note: There were 1067 genera including NA and uncultured. 690 with assigned names.
gen_prev_abund <- gen_abund %>%
left_join(., gen_prev, by = "Genus") %>%
separate(Genus, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus"),
sep = "; ") %>%
filter(Genus != "NA") %>%
filter(Genus != "uncultured") %>%
dplyr::select(-Absent, -Present_n)
# Export this for Noah
#writexl::write_xlsx(gen_prev_abund, "data/gen_prev_abund.xlsx", format_headers = F)
gen_90_point1 <- gen_prev_abund %>%
filter(MeanPercRelAbund > 0.1) %>%
filter(Present_Perc > 90) # 7/8
gen_85_point5 <- gen_prev_abund %>%
filter(MeanPercRelAbund > 0.5) %>%
filter(Present_Perc > 85) %>%
mutate(Genus2 = gsub("Candidatus", "", Genus)) %>%
mutate(Genus3 = gsub("Candidatus", "Candidatus ", Genus))
# At this step need to be less conservative. Want to input more to Sylph, then use that to refine.
# Top 10% of the named genera is about 0.1% rel abund. And try 75% prevalence.
# 40 genera
gen_75_point1 <- gen_prev_abund %>%
filter(MeanPercRelAbund > 0.1) %>%
filter(Present_Perc > 75) %>%
mutate(Genus2 = gsub("Candidatus", "", Genus)) %>%
mutate(Genus3 = gsub("Candidatus", "Candidatus ", Genus))
# Check if there are dominant OTUs for each focal genus
tax_sum_otu <- summarize_taxonomy(input = input_filt_rare,
level = 8,
report_higher_tax = T,
relative = T)
otu_abund <- data.frame("OTU" = rownames(tax_sum_otu),
"MeanPercRelAbund" = rowSums(tax_sum_otu)) %>%
arrange(desc(MeanPercRelAbund))
otu_prev <- data.frame("OTU" = rownames(tax_sum_otu),
"Absent" = rowSums(tax_sum_otu==0)) %>%
mutate(Present_n = ncol(tax_sum_otu) - Absent) %>%
mutate(Present_Perc = Present_n/ncol(tax_sum_otu)*100) %>%
arrange(desc(Present_Perc))
otu_prev_abund <- otu_abund %>%
left_join(., otu_prev, by = "OTU") %>%
separate(OTU, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus",
"Species", "OTU"),
sep = "; ") %>%
filter(Genus != "NA") %>%
filter(Genus != "uncultured") %>%
filter(Genus %in% gen_75_point1$Genus) %>%
dplyr::select(-Absent, -Present_n)
genus_otus <- otu_prev_abund %>%
group_by(Genus) %>%
summarise(n_OTUs = n()) %>%
arrange(desc(n_OTUs))
sum(genus_otus$n_OTUs)
# Plot ubiq/abund genera over aridity gradient
tax_sum_gen <- summarize_taxonomy(input = input_filt_rare,
level = 6,
report_higher_tax = F,
relative = T)
tax_sum_gen_focal <- as.data.frame(t(tax_sum_gen)) %>%
select(gen_75_point1$Genus) %>%
mutate(sampleID = rownames(.)) %>%
rename("Solibacter" = "CandidatusSolibacter",
"Udaeobacter" = "CandidatusUdaeobacter",
"Xiphinematobacter" = "CandidatusXiphinematobacter",
"Koribacter" = "CandidatusKoribacter")
d_focal <- input_filt_rare$map_loaded %>%
mutate(sampleID = rownames(.)) %>%
left_join(., tax_sum_gen_focal, by = "sampleID")
d_focal_long <- d_focal %>%
pivot_longer(cols = gen_75_point1$Genus2)
# Test linear and quadratic models
results <- as.data.frame(matrix(NA, nrow(gen_75_point1), 6)) %>%
set_names(c("Genus", "LinearR2", "LinearP", "QuadraticR2", "QuadraticP", "Compare"))
test_data <- d_focal %>%
dplyr::select(gen_75_point1$Genus2, AI)
for (i in 1:nrow(gen_75_point1)) {
results$Genus[i] <- gen_75_point1$Genus2[i]
m1 <- lm(test_data[,i] ~ test_data$AI)
results$LinearR2[i] <- summary(m1)$r.squared
results$LinearP[i] <- summary(m1)$coefficients[2,4]
m2 <- lm(test_data[,i] ~ test_data$AI + I(test_data$AI^2))
results$QuadraticR2[i] <- summary(m2)$r.squared
results$QuadraticP[i] <- glance(m2)$p.value
results$Compare[i] <- anova(m1, m2)$'Pr(>F)'[2]
}
# Decide best model or N.S.
results <- results %>%
mutate(Model = ifelse(LinearP > 0.05 & QuadraticP > 0.05, "NS",
ifelse(Compare < 0.05, "Quadratic", "Linear")))
quad <- results %>%
filter(Model == "Quadratic")
lin <- results %>%
filter(Model == "Linear")
ggplot(d_focal_long, aes(AI, value)) +
geom_point() +
geom_smooth(data = subset(d_focal_long, name %in% lin$Genus),
method = "lm") +
geom_smooth(data = subset(d_focal_long, name %in% quad$Genus),
method = "lm", formula = y ~ x + I(x^2)) +
labs(x = "Aridity index",
y = "Relative abundance") +
facet_wrap(~ name, ncol = 8, scales = "free_y") +
theme_bw() +
theme(strip.text = element_text(size = 6),
axis.text = element_text(size = 6))
# Subset to the 33 actually used (need to make genus_genomes_2 first)
d_focal_long_used <- d_focal_long %>%
filter(name %in% genus_genomes_2$Genus) %>%
droplevels()
#### 4. Ref Genomes ####
# Subset the GTDB full database to the genera of interest
bacGT <- read.delim("~/Desktop/Strains/bac120_metadata_r220.tsv") # takes a while to load
gtdb_focal <- bacGT %>%
mutate(gtdb_taxonomy = gsub("d__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("p__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("c__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("o__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("f__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("g__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("s__", "", gtdb_taxonomy)) %>%
separate(gtdb_taxonomy,
into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";") %>%
filter(Genus %in% gen_75_point1$Genus)
length(unique(gtdb_focal$Genus))
gen_75_point1$Genus
gen_75_point1$Genus %notin% gtdb_focal$Genus # Missing Cand. Udaeo, Cand. Soli, Acidibacter
# Knew Candidatus would cause issue. Check other taxonomy for Acidibacter. SILVA taxon.
# Tundrisphaera, Burkholderia-Caballeronia-Paraburkholderia, Actinomadura, P3OB-42
sum(grepl("Acidibacter", bacGT$gtdb_taxonomy)) # 0
sum(grepl("Acidibacter", bacGT$ncbi_taxonomy)) # 1
sum(grepl("Acidibacter", bacGT$ssu_gg_taxonomy)) # 0
sum(grepl("Acidibacter", bacGT$ssu_silva_taxonomy)) # 84
gtdb_acidibacter <- bacGT %>%
filter(grepl("Acidibacter", ssu_silva_taxonomy)) %>%
dplyr::select(gtdb_taxonomy, ncbi_taxonomy, ssu_gg_taxonomy, ssu_silva_taxonomy)
# Acidibacter is a mess. Several different genera in GTDB. 0 of 84 Acidibacter. Don't use.
gtdb_udaeobacter <- bacGT %>%
filter(grepl("Udaeobacter", ssu_silva_taxonomy)) %>%
dplyr::select(gtdb_taxonomy, ncbi_taxonomy, ssu_gg_taxonomy, ssu_silva_taxonomy)
# Udaeobacter isn't candidatus anymore. 34 of 82 Udaeobacter
gtdb_solibacter <- bacGT %>%
filter(grepl("Solibacter", ssu_silva_taxonomy)) %>%
dplyr::select(gtdb_taxonomy, ncbi_taxonomy, ssu_gg_taxonomy, ssu_silva_taxonomy)
# Solibacter isn't candidatus anymore. 3 of 51 Solibacter
gtdb_Tundrisphaera <- bacGT %>%
filter(grepl("Tundrisphaera", ssu_silva_taxonomy)) %>%
dplyr::select(gtdb_taxonomy, ncbi_taxonomy, ssu_gg_taxonomy, ssu_silva_taxonomy)
# Tundrisphaera has been reclassified to 2 genera
gtdb_bcp <- bacGT %>%
filter(grepl("Burkholderia-Caballeronia-Paraburkholderia", ssu_silva_taxonomy)) %>%
dplyr::select(gtdb_taxonomy, ncbi_taxonomy, ssu_gg_taxonomy, ssu_silva_taxonomy)
# These are split into 3 or more
gtdb_Actinomadura <- bacGT %>%
filter(grepl("Actinomadura", ssu_silva_taxonomy)) %>%
dplyr::select(gtdb_taxonomy, ncbi_taxonomy, ssu_gg_taxonomy, ssu_silva_taxonomy)
# These are split into Actinomadura, Spirillospora, Thermomonospora
gtdb_P3OB <- bacGT %>%
filter(grepl("P3OB-42", ssu_silva_taxonomy)) %>%
dplyr::select(gtdb_taxonomy, ncbi_taxonomy, ssu_gg_taxonomy, ssu_silva_taxonomy)
# Actually should check how many were in SILVA for comparison
silva_focal <- bacGT %>%
separate(ssu_silva_taxonomy,
into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";") %>%
filter(Genus %in% gen_75_point1$Genus3)
genus_genomes_silva <- silva_focal %>%
group_by(Genus) %>%
summarise(n_Genomes_SILVA = n()) %>%
arrange(desc(n_Genomes_SILVA))
# Subset to focal with Genus2
gtdb_focal <- bacGT %>%
mutate(gtdb_taxonomy = gsub("d__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("p__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("c__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("o__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("f__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("g__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("s__", "", gtdb_taxonomy)) %>%
separate(gtdb_taxonomy,
into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";") %>%
filter(Genus %in% gen_75_point1$Genus2)
length(unique(gtdb_focal$Genus))
# First check how many genomes per focal genus
genus_genomes <- gtdb_focal %>%
group_by(Genus) %>%
summarise(n_Genomes = n()) %>%
add_row(Genus = "Acidibacter", n_Genomes = 0) %>%
add_row(Genus = "Tundrisphaera", n_Genomes = 0) %>%
add_row(Genus = "Burkholderia-Caballeronia-Paraburkholderia", n_Genomes = 0) %>%
add_row(Genus = "Actinomadura", n_Genomes = 0) %>%
add_row(Genus = "P3OB-42", n_Genomes = 0) %>%
arrange(desc(n_Genomes))
# Merge all of the info
genus_info <- gen_75_point1 %>%
left_join(., genus_otus, by = "Genus") %>%
left_join(., genus_genomes, by = c("Genus2" = "Genus")) %>%
left_join(., genus_genomes_silva, by = c("Genus3" = "Genus")) %>%
dplyr::select(-Genus, -Genus3) %>%
rename(Genus = Genus2,
n_GTDB_genomes = n_Genomes,
n_GTDB_genomes_SILVAtax = n_Genomes_SILVA) %>%
dplyr::select(Domain, Phylum, Class, Order, Family, Genus,
MeanPercRelAbund, Present_Perc, n_OTUs, n_GTDB_genomes, n_GTDB_genomes_SILVAtax)
# Now, need to get a list of those NCBI accessions to download those genomes.
# For those 40 genera (35 with valid GTDB genus name), there are 21473 genomes.
# Need only 33 genera with valid GTDB genus name, and >= 2 GTDB genomes (n = 21471)
genus_info <- read_xlsx("data/genus_info_75point1.xlsx")
genus_genomes_2 <- genus_info %>%
filter(n_GTDB_genomes >= 2)
gtdb_focal <- bacGT %>%
mutate(gtdb_taxonomy = gsub("d__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("p__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("c__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("o__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("f__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("g__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("s__", "", gtdb_taxonomy)) %>%
separate(gtdb_taxonomy,
into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";") %>%
filter(Genus %in% genus_genomes_2$Genus)
# Met with Mads Albertson and apparently Acidothermus could actually Streptosporangiaceae
# So, download Streptosporangiaceae accessions and rerun Sylph
gtdb_strep <- bacGT %>%
mutate(gtdb_taxonomy = gsub("d__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("p__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("c__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("o__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("f__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("g__", "", gtdb_taxonomy)) %>%
mutate(gtdb_taxonomy = gsub("s__", "", gtdb_taxonomy)) %>%
separate(gtdb_taxonomy,
into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";") %>%
filter(Family == "Streptosporangiaceae")
ncbi_strep <- gtdb_strep %>%
dplyr::select(ncbi_genbank_assembly_accession)
sum(is.na(ncbi_strep$ncbi_genbank_assembly_accession)) # No NA.
sum(ncbi_strep$ncbi_genbank_assembly_accession == "NA") # No NA string.
length(unique(ncbi_strep$ncbi_genbank_assembly_accession)) # 573
write.table(ncbi_strep, "data/ncbi_strep.txt", sep = "\t", row.names = F, col.names = F)
