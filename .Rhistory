ann_colors <- list(`Genome Type` = c("Commercial" = "#EE3377",
"GTDB Isolate" = "#66CCEE",
"GTDB MAG" = "#332288",
"StrainFinder" = "#EE7733",
"StrainFinder Ref" = "yellow"),
# Genome = c("Strain" = "#00BFC4",
#            "Reference" = "red",
#            "Other GTDB" = "#C77CFF"),
`Genome Source` = c("Plant" = "#44AA99",
"Soil" = "#DDCC77",
"Other/NA" = "#DDDDDD"),
`Function` = c("N fix. Sym." = "#CCEEFF",
"N fix. Free" = "red",
"Photosyn." = "#225522",
" " = "white"),
# `Climate Class` = c("Arid to semi-arid" = "tan",
#           "Dry sub-humid" = "yellowgreen",
#           "Humid" = "deepskyblue"),
Vegetation = c("Forest" = "darkgreen",
"Shrubland" = "chartreuse3",
"Woodland" = "brown",
"Grassland" = "gold",
"Savannah" = "darkgoldenrod",
"Heathland" = "purple",
"Dune" = "antiquewhite"),
StrainFinder = c(No = "#F8766D",
Yes = "#619CFF"),
Aridity = colorRampPalette(brewer.pal(n = 3, name = "RdYlBu"))(100))
pheatmap(sylph_strains_331,
color = colorRampPalette(brewer.pal(n = 7, name = "Reds"))(100),
legend = T,
cluster_rows = F,
cluster_cols = F,
cellwidth = 1,
cellheight = 3,
angle_col = 90,
display_numbers = F,
number_color = "black",
annotation_col = ann_cols,
annotation_row = ann_rows,
annotation_colors = ann_colors,
annotation_names_row = F,
fontsize = 6,
fontsize_row = 3,
na_col = "white",
border_color = "white",
labels_row = rev(tree_data_maxmin$SpeciesShort),
show_colnames = F,
filename = "FinalFigs/Figure3.png",
width = 6,
height = 8)
dev.off()
dev.set(dev.next())
dev.set(dev.next())
# Import mctoolsr
tax_table_fp <- "data/seqtab_wTax_mctoolsr_mtagProk.txt"
map_fp <- "data/metadata104wDEM.txt"
input = load_taxa_table(tax_table_fp, map_fp) # 104 samples loaded
# Filter Chloroplast, Mitochondria, Domain NA
input_filt <- filter_taxa_from_input(input,
taxa_to_remove = "Chloroplast") # 92 removed
input_filt <- filter_taxa_from_input(input_filt,
taxa_to_remove = "Mitochondria") # 53 removed
input_filt <- filter_taxa_from_input(input_filt,
taxa_to_remove = "NA",
at_spec_level = 1) # 0 removed
# Remove singletons and doubletons
singdoub <- data.frame("count" = rowSums(input_filt$data_loaded)) %>%
filter(count < 3) %>%
mutate(ASV = rownames(.))
input_filt <- filter_taxa_from_input(input_filt,
taxa_IDs_to_remove = singdoub$ASV) # 10291 removed
# Rarefaction
rarecurve(t(input_filt$data_loaded), step = 500, label = F)
sort(colSums(input_filt$data_loaded))
mean(colSums(input_filt$data_loaded)) # 4824.74
se(colSums(input_filt$data_loaded)) # 149.4816
set.seed(530)
input_filt_rare <- single_rarefy(input_filt, 1849) # n = 104 still
sort(colSums(input_filt_rare$data_loaded))
# Add rarefied richness and Shannon
input_filt_rare$map_loaded$rich <- specnumber(input_filt_rare$data_loaded, MARGIN = 2)
input_filt_rare$map_loaded$shannon <- diversity(input_filt_rare$data_loaded,
index = "shannon", MARGIN = 2)
#### _Analysis ####
input_filt_rare <- readRDS("data/input_filt_rare_mtags.rds")
tax_sum_gen <- summarize_taxonomy(input = input_filt_rare,
level = 6,
report_higher_tax = T,
relative = T)
# Brady: 401644
# Strepto: 138530
# Udaeo: 12818
# Myco: 401610
# Acido: 401654
gen_abund <- data.frame("Genus" = rownames(tax_sum_gen),
"MeanPercRelAbund" = rowMeans(tax_sum_gen)*100) %>%
arrange(desc(MeanPercRelAbund))
gen_prev <- data.frame("Genus" = rownames(tax_sum_gen),
"Absent" = rowSums(tax_sum_gen==0)) %>%
mutate(Present_n = ncol(tax_sum_gen) - Absent) %>%
mutate(Present_Perc = Present_n/ncol(tax_sum_gen)*100) %>%
arrange(desc(Present_Perc))
View(gen_abund)
View(gen_prev)
View(strains_sylph_raw)
#### _Setup ####
contig_check <- read.delim("data/sylph_profile_brady915_n331.tsv") %>%
group_by(Sample_file, Genome_file) %>%
summarise(count = n())
View(contig_check)
View(brady_mat_func2)
dsrA <- read.delim("~/Downloads/exportdata.txt")
View(dsrA)
dsrA <- read.delim("~/Downloads/exportdata.txt") %>%
separate(Genome.Name, into = c("Genus", "Species", "Junk1", "Junk2"), sep = " ")
unique(dsrA$Genus)
pheatmap(brady_mat_func2,
color = c("grey80", "grey30"),
legend = T,
legend_breaks = c(0, 1),
legend_labels = c("0  ", "1  "),
cluster_rows = F,
cluster_cols = F,
annotation_row = ann_rows,
annotation_col = ann_cols,
annotation_colors = ann_colors,
angle_col = 315,
fontsize_row = 3,
fontsize_col = 5,
fontsize = 6,
border_color = "white",
gaps_col = c(5, 11),
labels_row = rev(tree_data_maxmin$SpeciesShort),
filename = "FinalFigs/FigureS7.png",
width = 4,
height = 9)
View(brady_mat_func2)
ann_cols <- data.frame(row.names = colnames(brady_mat_func2),
Function = c(rep("Nodulation", 5),
rep("N fixation", 6),
rep("Photosynthesis", 3)))
ann_rows <- data.frame(row.names = rownames(sylph_strains_331)) %>%
mutate(`Genome Type` = row_dat$Type,
`Genome Source` = row_dat$Source)
ann_colors <- list(`Genome Type` = c("Commercial" = "#EE3377",
"GTDB Isolate" = "#66CCEE",
"GTDB MAG" = "#332288",
"StrainFinder" = "#EE7733",
"StrainFinder Ref" = "yellow"),
`Genome Source` = c("Plant" = "#44AA99",
"Soil" = "#DDCC77",
"Other/NA" = "#DDDDDD"),
`Function` = c("Nodulation" = "#BBCCEE",
"N fixation" = "#FFCCCC",
"Photosynthesis" = "#CCDDAA"))
pheatmap(brady_mat_func2,
color = c("grey80", "grey30"),
legend = T,
legend_breaks = c(0, 1),
legend_labels = c("0  ", "1  "),
cluster_rows = F,
cluster_cols = F,
annotation_row = ann_rows,
annotation_col = ann_cols,
annotation_colors = ann_colors,
angle_col = 315,
fontsize_row = 3,
fontsize_col = 5,
fontsize = 6,
border_color = "white",
gaps_col = c(5, 11),
labels_row = rev(tree_data_maxmin$SpeciesShort),
filename = "FinalFigs/FigureS7.png",
width = 4,
height = 9)
dev.off()
dev.set(dev.next())
dev.set(dev.next())
#### _Comp ####
# Composition and drivers, Bray-Curtis, Jaccard, Weighted UniFrac, Unweighted UniFrac
sp_comp <- sylph_strains_331 %>%
replace(is.na(.), 0)
input <- list()
input$map_loaded <- d_sylph_ai_sort
rownames(input$map_loaded) <- d_sylph_ai_sort$sampleID
sum(d_sylph_ai_sort$sampleID != names(sp_comp))
input$data_loaded <- sp_comp
input$taxonomy_loaded <- sp_comp %>%
mutate(taxonomy1 = "Bacteria",
taxonomy2 = "Proteobacteria",
taxonomy3 = "Alphaproteobacteria",
taxonomy4 = "Hyphomicrobiales",
taxonomy5 = "Nitrobacteraceae",
taxonomy6 = "Bradyrhizobium",
taxonomy7 = rownames(.)) %>%
dplyr::select(taxonomy1, taxonomy2, taxonomy3, taxonomy4,
taxonomy5, taxonomy6, taxonomy7)
sum(rownames(input$data_loaded) != rownames(input$taxonomy_loaded))
# Prevalence
prev <- rowSums(input$data_loaded > 0)
range(prev)
# Alpha
input$map_loaded$rich <- specnumber(input$data_loaded,
MARGIN = 2)
input$map_loaded$shannon <- vegan::diversity(input$data_loaded,
index = "shannon",
MARGIN = 2)
range(input$map_loaded$rich)
range(input$map_loaded$shannon)
ggplot(input$map_loaded, aes(AI, rich)) +
geom_point(size = 3, pch = 16, alpha = 0.5) +
geom_smooth(se = F) +
labs(x = "drier <= Aridity index => wetter",
y = "Number of genomes detected") +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7,8)) +
theme_bw() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10))
# Check nitrate vs rich
summary(lm(rich ~ nitrate_nitrogen, data = input$map_loaded)) # p = 0.27
ggplot(input$map_loaded, aes(nitrate_nitrogen, rich)) +
geom_point(size = 3, pch = 16, alpha = 0.5) +
geom_smooth(method = "lm", se = F) +
labs(x = "Nitrate",
y = "Number of genomes detected") +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7,8)) +
theme_bw() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10))
dev.off()
ggplot(input$map_loaded, aes(nitrate_nitrogen, rich)) +
geom_point(size = 3, pch = 16, alpha = 0.5) +
geom_smooth(method = "lm", se = F) +
labs(x = "Nitrate",
y = "Number of genomes detected") +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7,8)) +
theme_bw() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10))
dev.off()
ggplot(input$map_loaded, aes(nitrate_nitrogen, rich)) +
geom_point(size = 3, pch = 16, alpha = 0.5) +
geom_smooth(method = "lm", se = F) +
labs(x = "Nitrate",
y = "Number of genomes detected") +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7,8)) +
theme_bw() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10))
# Dissimilarity matrices
bc <- calc_dm(input$data_loaded)
ja <- calc_dm(input$data_loaded, "jaccard")
# Import phylogenetic tree. Use Phyloseq to calculate weighted UniFrac distance
otu <- phyloseq::otu_table(input$data_loaded, taxa_are_rows = T)
tax <- phyloseq::tax_table(as.matrix(input$taxonomy_loaded))
map <- phyloseq::sample_data(input$map_loaded)
tree <- read_tree("data/brady181_fasttree_nogap.tree")
is.rooted(tree) # FALSE. Tree is not rooted
tree <- root(tree, outgroup = "Nitrobacter.fna", resolve.root = TRUE)
is.rooted(tree) # TRUE. Tree is now rooted at Nitrobacter.
tree <- ape::drop.tip(tree, "Nitrobacter.fna")
is.rooted(tree) # Tree is still rooted even after dropping that tip.
tree$tip.label
tree$tip.label <- gsub(".fna", "", tree$tip.label)
tree$tip.label <- gsub("Brady_", "", tree$tip.label)
input.phy <- phyloseq::phyloseq(otu, tax, map, tree)
Wun <- distance(input.phy,
method = "wunifrac",
type = "samples")
un <- distance(input.phy,
method = "unifrac",
type = "samples")
set.seed(100)
mantel(bc, Wun, permutations = 2000)
# Check
hist(bc)
hist(ja)
hist(Wun)
hist(un)
range(Wun)
# Check environmental variables
d_env <- input$map_loaded %>%
dplyr::select(sampleID, all_of(env_vars))
n_na <- c()
for (i in 1:ncol(d_env)) {
n_na[i] <- sum(is.na(d_env[,i]))
}
n_na # Most NA is 67, which means 201 have.
# envfit can handle NA anyway
# remove boron_hot_cacl2, exc_sodium, sulphur, bio12 because too correlated
# Also sand and iron
d_env <- input$map_loaded %>%
dplyr::select(clay, conductivity, dtpa_copper, dtpa_manganese,
dtpa_zinc, exc_aluminium, exc_calcium, exc_magnesium, exc_potassium,
latitude, longitude, nitrate_nitrogen, organic_carbon, ph,
phosphorus_colwell, silt, water_content, bio1, AI)
d_env2 <- d_env %>%
dplyr::select(-latitude, -longitude)
names(d_env2)
names(d_env2) <- c("Clay", "Conductivity", "Cu", "Mn", "Zn", "Al", "Ca", "Mg", "K",
"NO3", "C", "pH", "P", "Silt", "H2O", "Temp.", "Aridity")
#plot(d_env$conductivity, d_env$boron_hot_cacl2)
#plot(d_env$conductivity, d_env$exc_sodium)
#plot(d_env$conductivity, d_env$sulphur)
#plot(d_env$bio12, d_env$AI)
#plot(d_env$bio1, d_env$AI)
m <- cor(d_env2, use = "pairwise.complete.obs")
corrplot(m,
method = "number",
type = "lower",
diag = FALSE,
hclust.method = "ward.D2",
tl.cex = 0.5,
number.cex = 0.5)
# Ubiquity, genome size etc.
ubiq <- data.frame(GenomeID = rownames(input$data_loaded),
Ubiquity = rowSums(input$data_loaded > 0)) %>%
left_join(., row_dat, by = "GenomeID") %>%
mutate(Perc = Ubiquity/331*100) %>%
mutate(Nfix = ifelse(Function == "N fix.", "Yes", "No"))
table(ubiq$Nfix) # 146 to 35
table(Function)
table(ubiq$Function)
# Ubiquity, genome size etc.
ubiq <- data.frame(GenomeID = rownames(input$data_loaded),
Ubiquity = rowSums(input$data_loaded > 0)) %>%
left_join(., row_dat, by = "GenomeID") %>%
mutate(Perc = Ubiquity/331*100) %>%
mutate(Nfix = ifelse(Function == "N fix. Free" | Function == "N fix. Sym.",
"Yes", "No"))
table(ubiq$Function)
table(ubiq$Nfix) # 146 to 35
t.test(GenomeSize ~ Nfix, data = ubiq) # p = 0.59
ggplot(ubiq, aes(Nfix, GenomeSize)) +
geom_boxplot(outliers = F) +
geom_jitter(width = 0.25) +
theme_bw()
t.test(Ubiquity ~ Nfix, data = ubiq) # p = 0.02
ggplot(ubiq, aes(Nfix, Ubiquity)) +
geom_boxplot(outliers = F) +
geom_jitter(width = 0.25) +
theme_bw()
summary(lm(GenomeSize ~ Ubiquity, data = ubiq))
cor.test(ubiq$GenomeSize, ubiq$Ubiquity, method = "pearson")
figS4 <- ggplot(ubiq, aes(Ubiquity, GenomeSize)) +
geom_point(aes(fill = Type), pch = 21, size = 3) +
labs(x = "Prevalence (n samples detected)",
y = "Estimated genome size (bp)") +
scale_fill_manual(values = c("#EE3377",
"#66CCEE",
"#332288",
"#EE7733",
"yellow")) +
theme_bw() +
theme(legend.position = "inside",
legend.position.inside = c(1, 1),
legend.justification = c(1, 1),
legend.background = element_blank(),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10))
figS4
ubiq_gtdb <- ubiq %>%
filter(Type %in% c("GTDB Isolate", "GTDB MAG", "StrainFinder Ref"))
t.test(GenomeSize ~ Nfix, data = ubiq_gtdb) # p = 0.59
ggplot(ubiq_gtdb, aes(Nfix, GenomeSize)) +
geom_boxplot(outliers = F) +
geom_jitter(width = 0.25) +
theme_bw()
t.test(Ubiquity ~ Nfix, data = ubiq_gtdb) # p = 0.08
ggplot(ubiq_gtdb, aes(Nfix, Ubiquity)) +
geom_boxplot(outliers = F) +
geom_jitter(width = 0.25) +
theme_bw()
summary(lm(genome_size ~ Ubiquity, data = ubiq_gtdb))
cor.test(ubiq_gtdb$genome_size, ubiq_gtdb$Ubiquity, method = "pearson")
ggplot(ubiq_gtdb, aes(Ubiquity, genome_size)) +
geom_point(aes(fill = Type), pch = 21, size = 3) +
geom_smooth(method = "lm") +
labs(x = "Prevalence (n samples detected)",
y = "Genome size (bp)") +
theme_bw() +
theme(legend.position = "inside",
legend.position.inside = c(1, 1),
legend.justification = c(1, 1),
legend.background = element_blank(),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10))
ubiq_sort <- ubiq %>%
arrange(desc(Ubiquity), desc(Type)) %>%
mutate(rank = row_number())
ggplot(ubiq_sort, aes(rank, Ubiquity)) +
geom_point(aes(fill = Type), pch = 21, size = 3) +
labs(x = "Rank",
y = "Prevalence (n samples detected)") +
theme_bw() +
theme(legend.position = "inside",
legend.position.inside = c(1, 1),
legend.justification = c(1, 1),
legend.background = element_blank(),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10))
m <- adonis2(Wun ~ input$map_loaded$`Climate Class`)
m # Sig but low R2 (0.03)
m <- betadisper(Wun, input$map_loaded$`Climate Class`)
anova(m) # Sig
m <- adonis2(Wun ~ input$map_loaded$vegetation_type)
m # Sig R2 = 0.10
m <- betadisper(Wun, input$map_loaded$vegetation_type)
anova(m) # Sig
# NMDS
set.seed(100)
nmds <- metaMDS(Wun, trymax = 200)
stressplot(nmds)
stress(nmds)
nmds$stress
set.seed(100)
ef <- envfit(nmds, d_env, permutations = 999, na.rm = TRUE)
ef
ordiplot(nmds)
plot(ef, cex = 0.5, p.max = 0.001)
multiplier <- ordiArrowMul(ef)
multiplier
vec.df <- as.data.frame(ef$vectors$arrows*sqrt(ef$vectors$r)) %>%
mutate(NMDS1 = NMDS1 * multiplier,
NMDS2 = NMDS2 * multiplier) %>%
mutate(variables = rownames(.)) %>%
filter(ef$vectors$pvals <= 0.001) %>%
filter(variables != "dtpa_iron") %>%
filter(variables != "clay") %>%
mutate(shortnames = c("Mn", "Al", "Ca", "Mg", "K", "Long.", "C", "P",
"H2O", "Temp."))
input$map_loaded$Axis01 <- vegan::scores(nmds)[,1]
input$map_loaded$Axis02 <- vegan::scores(nmds)[,2]
fig4 <- ggplot(input$map_loaded, aes(Axis01, Axis02)) +
geom_point(size = 3, pch = 16, alpha = 0.4, aes(colour = vegetation_type)) +
# geom_segment(data = vec.df,
#              aes(x = 0, xend = NMDS1, y = 0, yend = NMDS2),
#              arrow = arrow(length = unit(0.35, "cm")),
#              colour = "gray", alpha = 0.6,
#              inherit.aes = FALSE) +
# geom_text_repel(data = vec.df,
#                 aes(x = NMDS1, y = NMDS2, label = shortnames),
#                 size = 3, color = "red") +
labs(x = "NMDS1",
y = "NMDS2") +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
panel.grid = element_blank())
fig4
fig4 <- ggplot(input$map_loaded, aes(Axis01, Axis02)) +
geom_point(size = 3, pch = 16, alpha = 0.4, aes(colour = `Climate Class`)) +
# geom_segment(data = vec.df,
#              aes(x = 0, xend = NMDS1, y = 0, yend = NMDS2),
#              arrow = arrow(length = unit(0.35, "cm")),
#              colour = "gray", alpha = 0.6,
#              inherit.aes = FALSE) +
# geom_text_repel(data = vec.df,
#                 aes(x = NMDS1, y = NMDS2, label = shortnames),
#                 size = 3, color = "red") +
labs(x = "NMDS1",
y = "NMDS2") +
theme_bw() +
theme(legend.position = "right",
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
panel.grid = element_blank())
fig4
ord <- calc_ordination(Wun, 'NMDS')
mctoolsr::plot_ordination(input, nmds, color_cat = "vegetation_type", hulls = T)
mctoolsr::plot_ordination(input, ord, color_cat = "vegetation_type", hulls = T)
mctoolsr::plot_ordination(input, ord, color_cat = "Climate Class", hulls = T)
#### __dbRDA ####
# Okay, now you can't have any NA
# Have to subset samples because all soil variables have NAs
# 216 samples retained
names(d_env2)
rownames(d_env2) <- rownames(d_env)
n_na <- c()
for (i in 1:ncol(d_env2)) {
n_na[i] <- sum(is.na(d_env2[,i]))
}
n_na
d_env3 <- d_env2 %>%
filter(is.na(pH) == FALSE) %>%
dplyr::select(-Clay, -Silt, -H2O)
Wun_mat <- as.matrix(Wun)
Wun_sub_mat <- Wun_mat[rownames(d_env3), rownames(d_env3)]
Wun_sub <- as.dist(Wun_sub_mat)
input_sub <- filter_data(input,
filter_cat = "sampleID",
keep_vals = rownames(d_env3)) # 216 remaining
# Geographic distance
dist.geog <- geosphere::distm(cbind(input_sub$map_loaded$longitude,
input_sub$map_loaded$latitude),
fun = distHaversine)
rownames(dist.geog) <- input_sub$map_loaded$sampleID
colnames(dist.geog) <- input_sub$map_loaded$sampleID
# Environmental distance
d_env_sig <- d_env3 %>%
dplyr::select(`Temp.`, pH, Mn, Al, NO3, Zn)
dist.env <- as.matrix(dist(d_env_sig, method = "euclidean", diag = FALSE, upper = FALSE))
rownames(dist.env) <- input_sub$map_loaded$sampleID
colnames(dist.env) <- input_sub$map_loaded$sampleID
set.seed(100)
mantel(Wun_sub, dist.geog, permutations = 2000)
set.seed(100)
mantel.partial(Wun_sub, dist.geog, dist.env, permutations = 2000)
set.seed(100)
mantel.partial(Wun_sub, dist.env, dist.geog, permutations = 2000) # r = 0.19, p = 0.0005
