left_join(., genus_info_dRep, by = "Genus") %>%
left_join(., genus_genomes_dRep, by = "Genus")
ggplot(sylph_compare, aes(n_GTDB_genomes, n_GTDB_Genomes_dRep)) +
geom_point(size = 2, pch = 16, alpha = 0.75) +
geom_smooth(method = "lm") +
theme_bw()
ggplot(sylph_compare, aes(n_Genomes_Sylph95, n_Genomes_Sylph95_dRep)) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
geom_point(size = 2, pch = 16, alpha = 0.75) +
geom_smooth(method = "lm") +
theme_bw()
ggplot(sylph_compare, aes(n_Samples_Sylph95, n_Samples_Sylph95_dRep)) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
geom_point(size = 2, pch = 16, alpha = 0.75) +
geom_smooth(method = "lm") +
theme_bw()
View(sylph_compare)
names(sylph_compar)
names(sylph_compare)
# Write file
sylph_compare_file <- sylph_compare %>%
dplyr::select(Genus, n_GTDB_genomes, n_GTDB_Genomes_dRep,
n_Samples_Sylph95, n_Samples_Sylph95_dRep,
n_Genomes_Sylph95, n_Genomes_Sylph95_dRep)
View(sylph_compare_file)
# Write file
sylph_compare_file <- sylph_compare %>%
filter(n_GTDB_genomes >= 2) %>%
dplyr::select(Genus, n_GTDB_genomes, n_GTDB_Genomes_dRep,
n_Samples_Sylph95, n_Samples_Sylph95_dRep,
n_Genomes_Sylph95, n_Genomes_Sylph95_dRep)
View(sylph_compare_file)
# Write file
sylph_compare_file <- sylph_compare %>%
filter(n_GTDB_genomes >= 2) %>%
dplyr::select(Genus, n_GTDB_genomes, n_GTDB_Genomes_dRep,
n_Samples_Sylph95, n_Samples_Sylph95_dRep,
n_Genomes_Sylph95, n_Genomes_Sylph95_dRep) %>%
arrange(desc(n_Samples_Sylph95))
View(sylph_compare_file)
writexl::write_xlsx(sylph_compare_file, "data/sylph_compare_drep.xlsx", format_headers = F)
#### _FastANI ####
# For top 4 genera, check ANI of top 4 genomes
ani <- read_xlsx("data/ani_top16.xlsx")
View(ani)
#### _FastANI ####
# For top 4 genera, check ANI of top 4 genomes
genus_accession <- gtdb_focal_final %>%
dplyr::select(Genus, ncbi_genbank_assembly_accession)
View(genus_accession)
#### _FastANI ####
# For top 4 genera, check ANI of top 4 genomes
genus_accession <- gtdb_focal_final %>%
dplyr::select(Genus, ncbi_genbank_assembly_accession) %>%
filter(Genus %in% "Bradyrhizobium", "Streptomyces", "Udaeobacter", "Mycobacterium")
#### _FastANI ####
# For top 4 genera, check ANI of top 4 genomes
genus_accession <- gtdb_focal_final %>%
dplyr::select(Genus, ncbi_genbank_assembly_accession) %>%
filter(Genus %in% c("Bradyrhizobium", "Streptomyces", "Udaeobacter", "Mycobacterium"))
View(ani)
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15))
View(ani)
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession"))
View(ani)
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus)
View(ani)
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus) %>%
left_join(., genus_accession, by = c("Reference" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Reference = Genus)
View(ani)
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus) %>%
left_join(., genus_accession, by = c("Reference" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Reference = Genus) %>%
mutate(Comparison = ifelse(Genus_Query == Genus_Reference,
"Same",
"Different"))
View(ani)
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus) %>%
left_join(., genus_accession, by = c("Reference" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Reference = Genus) %>%
mutate(Comparison = ifelse(Genus_Query == Genus_Reference,
"Same",
"Different")) %>%
filter(Comparison == "Same")
View(ani)
length(unique(ani$`ANI Estimate`))
View(ani)
length(unique(ani$Query))
length(unique(ani$Reference))
duplicated(ani$Query)
unique(ani$Query)
View(otu_abund)
View(otu_prev)
View(otu_prev)
View(tax_sum_otu)
View(genus_otus)
# Looping back here after running Sylph
# Want to check OTU distributions for Bradyrhizobium, Streptomyces, Udaeobacter, Mycobacterium
mtag_brady <- filter_taxa_from_input(input_filt_rare,
taxa_to_keep = "Bradyrhizobium",
at_spec_level = 6)
mtag_brady$map_loaded$sampleID <- as.character(mtag_brady$map_loaded$sampleID)
mtag_brady_otu <- summarize_taxonomy(input = mtag_brady,
level = 8,
report_higher_tax = F,
relative = T) %>%
replace(is.na(.), 0)
mtag_brady_taxaSort <- data.frame(meanAbund = rowMeans(mtag_brady_otu),
otu = rownames(mtag_brady_otu)) %>%
arrange(meanAbund)
mtag_brady_aiSort <- mtag_brady$map_loaded %>%
arrange(desc(AI))
g <- plot_ts_heatmap(mtag_brady_otu,
metadata_map = mtag_brady$map_loaded,
type_header = "sampleID",
min_rel_abund = 0,
custom_sample_order = mtag_brady_aiSort$sampleID,
custom_taxa_order = mtag_brady_taxaSort$otu,
remove_other = T) +
coord_flip() +
ggtitle("Bradyrhizobium") +
theme(axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 4, vjust = 0.5),
plot.title = element_text(hjust = 0.5))
g$layers[[2]] <- NULL
g
View(mtag_brady_otu)
mtag_strepto <- filter_taxa_from_input(input_filt_rare,
taxa_to_keep = "Streptomyces",
at_spec_level = 6)
mtag_strepto$map_loaded$sampleID <- as.character(mtag_strepto$map_loaded$sampleID)
mtag_strepto_otu <- summarize_taxonomy(input = mtag_strepto,
level = 8,
report_higher_tax = F,
relative = T) %>%
replace(is.na(.), 0)
mtag_strepto_taxaSort <- data.frame(meanAbund = rowMeans(mtag_strepto_otu),
otu = rownames(mtag_strepto_otu)) %>%
arrange(meanAbund)
mtag_strepto_aiSort <- mtag_strepto$map_loaded %>%
arrange(desc(AI))
g <- plot_ts_heatmap(mtag_strepto_otu,
metadata_map = mtag_strepto$map_loaded,
type_header = "sampleID",
min_rel_abund = 0,
custom_sample_order = mtag_strepto_aiSort$sampleID,
custom_taxa_order = mtag_strepto_taxaSort$otu,
remove_other = T) +
coord_flip() +
ggtitle("Streptomyces") +
theme(axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 4, vjust = 0.5),
plot.title = element_text(hjust = 0.5))
g$layers[[2]] <- NULL
g
View(mtag_strepto_aiSort)
View(mtag_strepto_taxaSort)
# Need to get the actual 16S sequence for the top rel abund OTU for those 4
# Download an mTAGs fasta for a sample with all of them
# Then blast Sylph genomes to see if the Sylph genome is same as the mTAGs OTU
top4_otu <- tax_sum_otu %>%
filter(grepl("otu_24062|otu_187776|otu_97930|otu_41087"), rownames(.))
# Need to get the actual 16S sequence for the top rel abund OTU for those 4
# Download an mTAGs fasta for a sample with all of them
# Then blast Sylph genomes to see if the Sylph genome is same as the mTAGs OTU
top4_otu <- tax_sum_otu %>%
filter(grepl("otu_24062|otu_187776|otu_97930|otu_41087"), x = rownames(.))
# Need to get the actual 16S sequence for the top rel abund OTU for those 4
# Download an mTAGs fasta for a sample with all of them
# Then blast Sylph genomes to see if the Sylph genome is same as the mTAGs OTU
top4_otu <- tax_sum_otu %>%
filter(grepl("otu_24062|otu_187776|otu_97930|otu_41087"), x == rownames(.))
# Need to get the actual 16S sequence for the top rel abund OTU for those 4
# Download an mTAGs fasta for a sample with all of them
# Then blast Sylph genomes to see if the Sylph genome is same as the mTAGs OTU
top4_otu <- tax_sum_otu %>%
filter(grepl("otu_24062|otu_187776|otu_97930|otu_41087", rownames(.)))
View(top4_otu)
View(top4_otu)
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus) %>%
left_join(., genus_accession, by = c("Reference" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Reference = Genus) %>%
mutate(Comparison = ifelse(Genus_Query == Genus_Reference,
"Same",
"Different")) %>%
filter(Comparison == "Same")
length(unique(ani$`ANI Estimate`))
length(unique(ani$Query))
length(unique(ani$Reference))
unique(ani$Query)
View(ani)
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus) %>%
left_join(., genus_accession, by = c("Reference" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Reference = Genus) %>%
mutate(Comparison = ifelse(Genus_Query == Genus_Reference,
"Same",
"Different")) %>%
filter(Comparison == "Same") %>%
arrange(Genus_Query, desc(`ANI Estimate`))
View(ani)
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus) %>%
left_join(., genus_accession, by = c("Reference" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Reference = Genus) %>%
mutate(Comparison = ifelse(Genus_Query == Genus_Reference,
"Same",
"Different")) %>%
filter(Comparison == "Same") %>%
arrange(Genus_Query, desc(`ANI Estimate`)) %>%
mutate(Genus = Genus_Query) %>%
dplyr::select(Genus, Query, Reference, `ANI Estimate`)
View(ani)
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus) %>%
left_join(., genus_accession, by = c("Reference" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Reference = Genus) %>%
mutate(Comparison = ifelse(Genus_Query == Genus_Reference,
"Same",
"Different")) %>%
filter(Comparison == "Same") %>%
arrange(Genus_Query, desc(`ANI Estimate`)) %>%
mutate(Genus = Genus_Query) %>%
dplyr::select(Genus, Query, Reference, `ANI Estimate`) %>%
mutate(Comp1 = paste(Query, Reference, sep = "_"),
Comp2 = paste(Reference, Query, sep = "_"))
View(ani)
for (i in 1:nrow(ani)) {
ani$Comp1[i] == ani$Comp2[i+1]
}
print(ani$Comp1[i] == ani$Comp2[i+1])
for (i in 1:nrow(ani)-1) {
print(ani$Comp1[i] == ani$Comp2[i+1])
}
View(ani)
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus) %>%
left_join(., genus_accession, by = c("Reference" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Reference = Genus) %>%
mutate(Comparison = ifelse(Genus_Query == Genus_Reference,
"Same",
"Different")) %>%
filter(Comparison == "Same") %>%
arrange(Genus_Query, desc(`ANI Estimate`)) %>%
mutate(Genus = Genus_Query) %>%
dplyr::select(Genus, Query, Reference, `ANI Estimate`) %>%
mutate(Comp1 = paste(Query, Reference, sep = "_"),
Comp2 = paste(Reference, Query, sep = "_")) %>%
filter(Comp1 %notin% Comp2)
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus) %>%
left_join(., genus_accession, by = c("Reference" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Reference = Genus) %>%
mutate(Comparison = ifelse(Genus_Query == Genus_Reference,
"Same",
"Different")) %>%
filter(Comparison == "Same") %>%
arrange(Genus_Query, desc(`ANI Estimate`)) %>%
mutate(Genus = Genus_Query) %>%
dplyr::select(Genus, Query, Reference, `ANI Estimate`) %>%
mutate(Comp1 = paste(Query, Reference, sep = "_"),
Comp2 = paste(Reference, Query, sep = "_"))
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus) %>%
left_join(., genus_accession, by = c("Reference" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Reference = Genus) %>%
mutate(Comparison = ifelse(Genus_Query == Genus_Reference,
"Same",
"Different")) %>%
filter(Comparison == "Same") %>%
arrange(Genus_Query, desc(`ANI Estimate`)) %>%
mutate(Genus = Genus_Query) %>%
dplyr::select(Genus, Query, Reference, `ANI Estimate`) %>%
mutate(Comp1 = paste(Query, Reference, sep = "_"),
Comp2 = paste(Reference, Query, sep = "_"))
View(ani)
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus) %>%
left_join(., genus_accession, by = c("Reference" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Reference = Genus) %>%
mutate(Comparison = ifelse(Genus_Query == Genus_Reference,
"Same",
"Different")) %>%
filter(Comparison == "Same") %>%
arrange(Genus_Query, desc(`ANI Estimate`)) %>%
mutate(Genus = Genus_Query) %>%
dplyr::select(Genus, Query, Reference, `ANI Estimate`) %>%
mutate(Comp1 = paste(Query, Reference, sep = "_"),
Comp2 = paste(Reference, Query, sep = "_"),
ToDelete = NA)
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus) %>%
left_join(., genus_accession, by = c("Reference" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Reference = Genus) %>%
mutate(Comparison = ifelse(Genus_Query == Genus_Reference,
"Same",
"Different")) %>%
filter(Comparison == "Same") %>%
arrange(Genus_Query, desc(`ANI Estimate`)) %>%
mutate(Genus = Genus_Query) %>%
dplyr::select(Genus, Query, Reference, `ANI Estimate`) %>%
mutate(Comp1 = paste(Query, Reference, sep = "_"),
Comp2 = paste(Reference, Query, sep = "_"),
ToDelete = NA)
for (i in 1:nrow(ani)) {
ani$ToDelete[i] <- ifelse(ani$Comp2[i] %in% ani$Comp1[i-1],
"Delete",
"Keep")
}
View(ani)
ani <- ani %>%
filter(toDelete == "Keep") %>%
dplyr::select(Genus, Query, Reference, `ANI Estimate`)
ani <- ani %>%
filter(ToDelete == "Keep") %>%
dplyr::select(Genus, Query, Reference, `ANI Estimate`)
View(ani)
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus) %>%
left_join(., genus_accession, by = c("Reference" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Reference = Genus) %>%
mutate(Comparison = ifelse(Genus_Query == Genus_Reference,
"Same",
"Different")) %>%
filter(Comparison == "Same") %>%
arrange(Genus_Query, desc(`ANI Estimate`)) %>%
mutate(Genus = Genus_Query) %>%
dplyr::select(Genus, Query, Reference, `ANI Estimate`) %>%
mutate(Comp1 = paste(Query, Reference, sep = "_"),
Comp2 = paste(Reference, Query, sep = "_"),
ToDelete = NA)
length(unique(ani$Comp1))
length(unique(ani$Comp2))
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus) %>%
left_join(., genus_accession, by = c("Reference" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Reference = Genus) %>%
mutate(Comparison = ifelse(Genus_Query == Genus_Reference,
"Same",
"Different")) %>%
filter(Comparison == "Same") %>%
arrange(Genus_Query, desc(`ANI Estimate`)) %>%
mutate(Genus = Genus_Query) %>%
dplyr::select(Genus, Query, Reference, `ANI Estimate`) %>%
mutate(Comp1 = paste(Query, Reference, sep = "_"),
Comp2 = paste(Reference, Query, sep = "_"),
ToDelete = NA)
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus) %>%
left_join(., genus_accession, by = c("Reference" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Reference = Genus) %>%
mutate(Comparison = ifelse(Genus_Query == Genus_Reference,
"Same",
"Different")) %>%
filter(Comparison == "Same") %>%
arrange(Genus_Query, desc(`ANI Estimate`)) %>%
mutate(Genus = Genus_Query) %>%
dplyr::select(Genus, Query, Reference, `ANI Estimate`))
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus) %>%
left_join(., genus_accession, by = c("Reference" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Reference = Genus) %>%
mutate(Comparison = ifelse(Genus_Query == Genus_Reference,
"Same",
"Different")) %>%
filter(Comparison == "Same") %>%
arrange(Genus_Query, desc(`ANI Estimate`)) %>%
mutate(Genus = Genus_Query) %>%
dplyr::select(Genus, Query, Reference, `ANI Estimate`)
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus) %>%
left_join(., genus_accession, by = c("Reference" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Reference = Genus) %>%
mutate(Comparison = ifelse(Genus_Query == Genus_Reference,
"Same",
"Different")) %>%
filter(Comparison == "Same") %>%
arrange(Genus_Query, desc(`ANI Estimate`)) %>%
mutate(Genus = Genus_Query) %>%
dplyr::select(Genus, Query, Reference, `ANI Estimate`)
ani$pair_id <- apply(ani, 1, function(row) paste(sort(row), collapse = "_"))
ani <- ani[!duplicated(ani$pair_id), ]
View(ani)
View(ani)
View(ani)
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus) %>%
left_join(., genus_accession, by = c("Reference" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Reference = Genus) %>%
mutate(Comparison = ifelse(Genus_Query == Genus_Reference,
"Same",
"Different")) %>%
filter(Comparison == "Same") %>%
arrange(Genus_Query, desc(`ANI Estimate`)) %>%
mutate(Genus = Genus_Query) %>%
dplyr::select(Genus, Query, Reference, `ANI Estimate`)
ani$pair_id <- apply(ani, 1, function(row) paste(sort(row), collapse = "_"))
ani$pair_id <- substr(ani$pair_id, start = 9)
ani$pair_id <- substr(ani$pair_id, start = 9, stop = nchar(ani$pair_id))
ani <- ani[!duplicated(ani$pair_id), ]
View(ani)
ani <- ani %>%
dplyr::select(Genus, Query, Reference, `ANI Estimate`)
length(unique(ani$`ANI Estimate`))
length(unique(ani$Query))
length(unique(ani$Reference))
length(unique(ani$Comp1))
View(ani)
ani <- ani %>%
dplyr::select(Genus, Query, Reference, `ANI Estimate`) %>%
arrange(Genus, Query)
View(ani)
length(unique(rbind(ani$Query, ani$Reference)))
check <- rbind(ani$Query, ani$Reference)
check
unique(check)
unique(check)
check <- as.data.frame(rbind(ani$Query, ani$Reference))
unique(check)
View(check)
rm(check)
length(unique(c(ani$Query, ani$Reference)))
ani <- read_xlsx("data/ani_top16.xlsx") %>%
mutate(Query = substr(Query, start = 1, stop = 15),
Reference = substr(Reference, start = 1, stop = 15)) %>%
left_join(., genus_accession, by = c("Query" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Query = Genus) %>%
left_join(., genus_accession, by = c("Reference" = "ncbi_genbank_assembly_accession")) %>%
rename(Genus_Reference = Genus) %>%
mutate(Comparison = ifelse(Genus_Query == Genus_Reference,
"Same",
"Different")) %>%
filter(Comparison == "Same") %>%
arrange(Genus_Query, desc(`ANI Estimate`)) %>%
mutate(Genus = Genus_Query) %>%
dplyr::select(Genus, Query, Reference, `ANI Estimate`)
ani$pair_id <- apply(ani, 1, function(row) paste(sort(row), collapse = "_"))
ani$pair_id <- substr(ani$pair_id, start = 9, stop = nchar(ani$pair_id))
ani <- ani[!duplicated(ani$pair_id), ]
ani <- ani %>%
dplyr::select(Genus, Query, Reference, `ANI Estimate`)
View(ani)
View(genus_info)
View(genus_info)
